'use strict';

// Задание 1
// Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. 
// Каждая итерация должна возвращать следующий альбом из коллекции.

// Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. 
// Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: 
// Название альбома - Исполнитель (Год выпуска)

const musicCollection = {
    albums: [
        {
            title: "1",
            artist: "Alex",
            year: "2001"
        },
        {
            title: "2",
            artist: "Soso",
            year: "2002"
        },
        {
            title: "3",
            artist: "User",
            year: "2003"
        },
        {
            title: "4",
            artist: "Rolf",
            year: "2004"
        },
    ]
}

musicCollection[Symbol.iterator] = function () {
    return {
        current: 0,
        to: this.albums.length,

        next() {
            return this.current < this.to ? { done: false, value: musicCollection.albums[this.current++] } : { done: true };
        }
    }
}

for (const album of musicCollection) {
    console.log(`${album.title} - ${album.artist} (${album.year})`);
}

// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. 
// Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. 
// В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

const cooks = new Map();

cooks.set('Пицца', 'Виктор');
cooks.set('Суши', 'Ольга');
cooks.set('Десерты', 'Дмитрий');

const dishes = new Map();

dishes.set(cooks.get('Пицца'), 'Маргарита');
dishes.set(cooks.get('Пицца'), 'Пепперони');
dishes.set(cooks.get('Суши'), 'Филадельфия');
dishes.set(cooks.get('Суши'), 'Калифорния');
dishes.set(cooks.get('Десерты'), 'Тирамису');
dishes.set(cooks.get('Десерты'), 'Чизкейк');

const orders = new Map();

orders.set('Алексей', ['Пепперони', 'Тирамису']);
orders.set('Мария', ['Калифорния', 'Маргарита']);
orders.set('Ирина', ['Чизкейк']);

console.log(orders);

